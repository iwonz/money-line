{"version":3,"sources":["services/generator.ts","components/Day/Day.tsx","components/TimeLine/TimeLine.tsx","components/App/App.tsx","serviceWorker.ts","index.tsx"],"names":["IOperationType","IOperationPeriod","Day","className","this","props","isActive","data-date","date","format","onClick","toLocaleString","navigator","language","minimumFractionDigits","React","Component","uuid","generateOperation","type","sample","Object","values","period","start","momentRandom","moment","add","subtract","finish","amount","randomFrom","Income","randomTo","id","isNil","random","getDatesInRange","from","to","dates","current","clone","iters","isAfter","push","TimeLine","timeLineContentElement","operations","count","i","operation","find","item","orderBy","generateOperations","state","days","get","head","activeDay","scrollLeft","onScroll","bind","years","map","currentValue","set","concat","content","keys","year","key","month","upperFirst","valueOf","onDayClickHandler","onWheel","defaultStyle","z","style","spring","presets","noWobble","transform","willChange","ref","r","scrollToDate","event","preventDefault","delta","Math","abs","deltaX","deltaY","newScrollLeft","getNewScrollLeft","window","requestAnimationFrame","setState","updateHeaders","candidate","maxScrollLeft","offsetWidth","parentElement","forEach","querySelectorAll","headerElement","headerWidth","parentOffsetLeft","parentNode","offsetLeft","parentOffsetWidth","yearWidth","firstElementChild","left","currentDayElement","querySelector","monthElement","closest","yearElement","locale","App","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b8d25e5e.chunk.js","sourcesContent":["import { isNil, random, sample, find, orderBy } from 'lodash';\r\nimport moment, { Moment } from 'moment';\r\nimport momentRandom from 'moment-random';\r\n\r\nlet uuid = 0;\r\n\r\nexport enum IOperationType {\r\n  Income = 1,\r\n  Consumption,\r\n}\r\n\r\nexport enum IOperationPeriod {\r\n  Once = 1,\r\n  EverySecond,\r\n  EveryMinute,\r\n  EveryHour,\r\n  EveryDay,\r\n  EveryWeek,\r\n  EveryMonth,\r\n  EveryYear,\r\n}\r\n\r\nexport interface IOperation {\r\n  id: number;\r\n  type: IOperationType;\r\n  period: IOperationPeriod;\r\n  start: Moment;\r\n  finish: Moment;\r\n  amount: number;\r\n}\r\n\r\nexport function generateOperation(\r\n  type: IOperationType = sample(Object.values(IOperationType)) as IOperationType,\r\n  period: IOperationPeriod = sample(Object.values(IOperationPeriod)) as IOperationPeriod,\r\n  start: Moment = momentRandom(moment().add(1, 'month'), moment().subtract(1, 'month')),\r\n  finish: Moment = momentRandom(moment().add(2, 'month'), moment().add(1, 'month')),\r\n  amount?: number,\r\n): IOperation {\r\n  const randomFrom = type === IOperationType.Income ? 1 : -150000;\r\n  const randomTo = type === IOperationType.Income ? 150000 : -1;\r\n\r\n  return {\r\n    id: ++uuid,\r\n    type,\r\n    period,\r\n    start,\r\n    finish,\r\n    amount: isNil(amount) ? random(randomFrom, randomTo, true) : amount,\r\n  };\r\n}\r\n\r\nexport function generateOperations(count: number): IOperation[] {\r\n  let operations = [];\r\n\r\n  for (let i = 1; i <= count; i++) {\r\n    let operation = generateOperation();\r\n\r\n    while (find(operations, item => item.start.format('LL') === operation.start.format('LL'))) {\r\n      operation = generateOperation();\r\n    }\r\n\r\n    operations.push(operation);\r\n  }\r\n\r\n  return orderBy(operations, operation => +operation.start);\r\n}\r\n","import React from 'react';\r\nimport { Moment } from 'moment';\r\n\r\nimport './Day.scss';\r\n\r\nexport interface IDateProps {\r\n  date: Moment;\r\n  isActive: boolean;\r\n  onClick: any;\r\n}\r\n\r\nexport default class Day extends React.Component<IDateProps> {\r\n  render() {\r\n    return (\r\n      <div\r\n        className={'day ' + (this.props.isActive ? 'day_active' : '')}\r\n        data-date={this.props.date.format('LL')}\r\n        onClick={this.props.onClick}\r\n      >\r\n        <div className=\"day-header\">\r\n          <div className=\"day-header__date\">{this.props.date.format('DD')}</div>\r\n          <div className=\"day-header__day-of-week\">{this.props.date.format('ddd')}</div>\r\n        </div>\r\n        <div className=\"day-header__content\">\r\n          <div className=\"day__consumption\">\r\n            -{(1500).toLocaleString(navigator.language, { minimumFractionDigits: 2 })}\r\n          </div>\r\n          <div className=\"day__income\">+{(4233).toLocaleString(navigator.language, { minimumFractionDigits: 2 })}</div>\r\n        </div>\r\n        <div className=\"day-header__footer\">\r\n          <div className=\"day__balance\">\r\n            {(423582).toLocaleString(navigator.language, { minimumFractionDigits: 2 })}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React, { RefObject } from 'react';\r\nimport { head, get, upperFirst, set, forEach, concat } from 'lodash';\r\nimport moment, { Moment } from 'moment';\r\nimport { Motion, presets, spring } from 'react-motion';\r\n\r\nimport './TimeLine.scss';\r\n\r\nimport Day from '../Day/Day';\r\nimport { generateOperations } from '../../services/generator';\r\n\r\nexport interface ITimeLineState {\r\n  activeDay: Moment;\r\n  days: Moment[];\r\n  scrollLeft: number;\r\n}\r\n\r\nconst getDatesInRange = (from: Moment, to: Moment): Moment[] => {\r\n  const dates = [];\r\n\r\n  let current = from.clone();\r\n\r\n  let iters = 0;\r\n\r\n  while (!current.isAfter(to) && iters <= 90) {\r\n    dates.push(current.clone());\r\n    current = current.clone().add(1, 'days');\r\n\r\n    iters++;\r\n  }\r\n\r\n  return dates;\r\n};\r\n\r\nexport default class TimeLine extends React.Component<any, ITimeLineState> {\r\n  timeLineContentElement: HTMLDivElement;\r\n\r\n  constructor(props: any) {\r\n    super(props);\r\n\r\n    const operations = generateOperations(15);\r\n\r\n    this.state = {\r\n      days: getDatesInRange(get(head(operations), 'start') as Moment, moment().add(1, 'month')),\r\n      activeDay: moment(),\r\n      scrollLeft: 0,\r\n    };\r\n\r\n    this.onScroll = this.onScroll.bind(this);\r\n  }\r\n\r\n  render() {\r\n    const years: any = {};\r\n\r\n    this.state.days.map(date => {\r\n      const currentValue = get(years, `${date.format('YYYY')}.${date.format('MM')}`, []);\r\n      set(years, `${date.format('YYYY')}.${date.format('MM')}`, concat(currentValue, date));\r\n    });\r\n\r\n    const content = Object.keys(years).map(year => {\r\n      return (\r\n        <div className=\"timeline__year\" key={year}>\r\n          <span className=\"timeline__year-header\">{year}</span>\r\n          {Object.keys(years[year]).map(month => {\r\n            return (\r\n              <div className=\"timeline__month\" key={month}>\r\n                <span className=\"timeline__month-header\">{upperFirst(moment(month, 'MM').format('MMMM'))}</span>\r\n                {years[year][month].map((date: Moment) => {\r\n                  return (\r\n                    <Day\r\n                      key={date.valueOf()}\r\n                      date={date}\r\n                      isActive={date.format('LL') === this.state.activeDay.format('LL')}\r\n                      onClick={this.onDayClickHandler.bind(this, date)}\r\n                    />\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"timeline\" onWheel={this.onScroll}>\r\n        <Motion defaultStyle={{ z: 0 }} style={{ z: spring(this.state.scrollLeft, presets.noWobble) }}>\r\n          {({ z }) => (\r\n            <div\r\n              style={{ transform: `translate3d(-${z}px, 0, 0)`, willChange: `transform` }}\r\n              className=\"timeline__content\"\r\n              ref={r => (this.timeLineContentElement = r)}\r\n            >\r\n              {content}\r\n            </div>\r\n          )}\r\n        </Motion>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.scrollToDate(this.state.activeDay);\r\n  }\r\n\r\n  onScroll(event) {\r\n    event.preventDefault();\r\n\r\n    const delta = Math.abs(event.deltaX) > Math.abs(event.deltaY) ? event.deltaX : event.deltaY;\r\n    const newScrollLeft = this.getNewScrollLeft(this.state.scrollLeft + delta);\r\n\r\n    if (this.state.scrollLeft === newScrollLeft) {\r\n      return;\r\n    }\r\n\r\n    const scrolling = () => {\r\n      this.setState({ scrollLeft: newScrollLeft });\r\n      this.updateHeaders();\r\n    };\r\n\r\n    // Begin Scrolling Animation\r\n    window.requestAnimationFrame(scrolling);\r\n  }\r\n\r\n  getNewScrollLeft(candidate: number): number {\r\n    if (candidate < 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (!this.timeLineContentElement) {\r\n      return candidate;\r\n    }\r\n\r\n    const maxScrollLeft =\r\n      this.timeLineContentElement.offsetWidth - this.timeLineContentElement.parentElement.offsetWidth;\r\n\r\n    if (candidate > maxScrollLeft) {\r\n      return maxScrollLeft;\r\n    }\r\n\r\n    return candidate;\r\n  }\r\n\r\n  onDayClickHandler(date: Moment) {\r\n    this.setState(\r\n      {\r\n        activeDay: date,\r\n      },\r\n      () => {\r\n        this.scrollToDate(this.state.activeDay);\r\n      },\r\n    );\r\n  }\r\n\r\n  updateHeaders() {\r\n    if (!this.timeLineContentElement) {\r\n      return;\r\n    }\r\n\r\n    const scrollLeft = this.state.scrollLeft;\r\n\r\n    forEach(this.timeLineContentElement.querySelectorAll('.timeline__month-header'), (headerElement: any) => {\r\n      const headerWidth = headerElement.offsetWidth;\r\n      const parentOffsetLeft = headerElement.parentNode.offsetLeft;\r\n      const parentOffsetWidth = headerElement.parentNode.offsetWidth;\r\n      const yearWidth = headerElement.parentNode.parentNode.firstElementChild.offsetWidth;\r\n\r\n      if (\r\n        scrollLeft >= parentOffsetLeft - headerWidth &&\r\n        scrollLeft <= parentOffsetLeft + parentOffsetWidth - headerWidth - yearWidth\r\n      ) {\r\n        headerElement.style.left = `${scrollLeft - parentOffsetLeft + yearWidth + 15}px`;\r\n      } else {\r\n        headerElement.style.left = '0px';\r\n      }\r\n    });\r\n\r\n    forEach(this.timeLineContentElement.querySelectorAll('.timeline__year-header'), (headerElement: any) => {\r\n      const headerWidth = headerElement.offsetWidth;\r\n      const parentOffsetLeft = headerElement.parentNode.offsetLeft;\r\n      const parentOffsetWidth = headerElement.parentNode.offsetWidth;\r\n\r\n      if (scrollLeft >= parentOffsetLeft && scrollLeft <= parentOffsetLeft + parentOffsetWidth - headerWidth) {\r\n        headerElement.style.left = `${scrollLeft - parentOffsetLeft}px`;\r\n      } else {\r\n        headerElement.style.left = '0px';\r\n      }\r\n    });\r\n  }\r\n\r\n  scrollToDate(date: Moment) {\r\n    if (!this.timeLineContentElement) {\r\n      return;\r\n    }\r\n\r\n    const currentDayElement: HTMLDivElement | null = this.timeLineContentElement.querySelector(\r\n      `.day[data-date=\"${date.format('LL')}\"]`,\r\n    );\r\n    const monthElement = currentDayElement.closest<HTMLDivElement>('.timeline__month');\r\n    const yearElement = currentDayElement.closest<HTMLDivElement>('.timeline__year');\r\n\r\n    if (!currentDayElement || !yearElement || !monthElement) {\r\n      return;\r\n    }\r\n\r\n    const newScrollLeft = this.getNewScrollLeft(\r\n      yearElement.offsetLeft +\r\n        monthElement.offsetLeft +\r\n        currentDayElement.offsetLeft -\r\n        currentDayElement.offsetWidth -\r\n        currentDayElement.offsetWidth / 1.5,\r\n    );\r\n\r\n    this.setState(\r\n      {\r\n        scrollLeft: newScrollLeft,\r\n      },\r\n      () => this.updateHeaders(),\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './App.css';\r\nimport TimeLine from '../TimeLine/TimeLine';\r\n\r\nimport moment from 'moment';\r\n\r\nimport 'moment/min/locales';\r\n\r\nmoment.locale(window.navigator.language);\r\n\r\nconst App: React.FC = () => {\r\n  return (\r\n    <div className=\"app\">\r\n      <TimeLine />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL((process as { env: { [key: string]: string } }).env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './css/index.css';\r\nimport App from './components/App/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}